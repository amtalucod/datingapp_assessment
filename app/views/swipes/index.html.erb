
<% provide(:title,'') %>
<br />
<% if @users.any? %>
<style>
    html,
    body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #board {
        width: 100%;
        height: 100%;
        #position: relative;
        overflow: hidden;
        background-color: rgb(245, 247, 250);
    }

    .card {
        width: 350px;
        height: 600px;
        position: absolute;
        top: 50%;
        left: 50%;
        border-radius: 1%;
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.1);
        background-color: white;
        transform: translateX(-50%) translateY(-50%) scale(0.95);
        background-position: center center;
        background-size: cover;
    }
    
    .card .gallery_button {
      position: absolute; /* Set the button position to absolute */
      bottom: 10px; /* Adjust the bottom spacing as needed */
      left: 50%; /* Position the button horizontally in the center */
      transform: translateX(-50%); /* Center the button horizontally */
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 75%; /* 3/4 of the container's width */
        height: 100%;
        background-size: cover; /* Cover the entire width */
        background-position: center; /* Center the background */
      }

      .card::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0; /* 3/4 of the container's width */
        width: 100%; /* 1/4 of the container's width */
        height: 25%;
        background-color: white; /* Set the color for the remaining 1/4 */
      }
      
      .swipe_bot {
        position: fixed;
        bottom: 10px; /* Adjust as needed */
        left: 50%; /* Position horizontally in the center */
        transform: translateX(-50%); /* Center horizontally */
        z-index: 1; 
        width: 100%
    }
</style>

<body>
    <div id="board"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script>
        /* LikeCarousel (c) 2019 Simone P.M. github.com/simonepm - Licensed MIT */

        class Carousel {

            constructor(element) {

                this.board = element

                // add cards per user
                <% @users.each do |user| %>
                  <% imgs = [] %>
                  <% user.images.each do |image| %>
                      <% imgs.push(image.cloudinary_url) %>
                  <% end %> 
                  this.createGalleryModal(<%= user.id %>, '<%= imgs.join(", ") %>')
                  this.push(<%= user.id %>,'<%= imgs[0] %>', '<%= user.first_name + " " + user.last_name%>', '<%= user.location.country  + " | " + user.location.state_region + " | " + user.location.city %>', '<%= user.bio %>')
                  <% end %> 

                // handle gestures
                this.handle()

            }

            handle() {

                // list all cards
                this.cards = this.board.querySelectorAll('.card')

                // get top card
                this.topCard = this.cards[this.cards.length - 1]

                // get next card
                this.nextCard = this.cards[this.cards.length - 2]

                // if at least one card is present
                if (this.cards.length > 0) {

                    // set default top card position and scale
                    this.topCard.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'

                    // destroy previous Hammer instance, if present
                    if (this.hammer) this.hammer.destroy()

                    // listen for tap and pan gestures on top card
                    this.hammer = new Hammer(this.topCard)
                    this.hammer.add(new Hammer.Tap())
                    this.hammer.add(new Hammer.Pan({
                        position: Hammer.position_ALL,
                        threshold: 0
                    }))

                    // pass events data to custom callbacks
                    this.hammer.on('tap', (e) => {
                        this.onTap(e)
                    })
                    this.hammer.on('pan', (e) => {
                        this.onPan(e)
                    })

                } else {
                  location.reload();
                }

            }

            onTap(e) {

                // get finger position on top card
                let propX = (e.center.x - e.target.getBoundingClientRect().left) / e.target.clientWidth

                // get rotation degrees around Y axis (+/- 15) based on finger position
                let rotateY = 15 * (propX < 0.05 ? -1 : 1)

                // enable transform transition
                this.topCard.style.transition = 'transform 100ms ease-out'

                // apply rotation around Y axis
                this.topCard.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(' + rotateY + 'deg) scale(1)'

                // wait for transition end
                setTimeout(() => {
                    // reset transform properties
                    this.topCard.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
                }, 100)

            }

            onPan(e) {

                if (!this.isPanning) {

                    this.isPanning = true

                    // remove transition properties
                    this.topCard.style.transition = null
                    if (this.nextCard) this.nextCard.style.transition = null

                    // get top card coordinates in pixels
                    let style = window.getComputedStyle(this.topCard)
                    let mx = style.transform.match(/^matrix\((.+)\)$/)
                    this.startPosX = mx ? parseFloat(mx[1].split(', ')[4]) : 0
                    this.startPosY = mx ? parseFloat(mx[1].split(', ')[5]) : 0

                    // get top card bounds
                    let bounds = this.topCard.getBoundingClientRect()

                    // get finger position on top card, top (1) or bottom (-1)
                    this.isDraggingFrom =
                        (e.center.y - bounds.top) > this.topCard.clientHeight / 2 ? -1 : 1

                }

                // get new coordinates
                let posX = e.deltaX + this.startPosX
                let posY = e.deltaY + this.startPosY
                
                // get ratio between swiped pixels and the axes
                let propX = e.deltaX / this.board.clientWidth
                let propY = e.deltaY / this.board.clientHeight
                

                // get swipe direction, left (-1) or right (1)
                let dirX = e.deltaX < 0 ? -1 : 1

                // get degrees of rotation, between 0 and +/- 45
                let deg = this.isDraggingFrom * dirX * Math.abs(propX) * 45

                // get scale ratio, between .95 and 1
                let scale = (95 + (5 * Math.abs(propX))) / 100

                // move and rotate top card
                this.topCard.style.transform =
                    'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg) rotateY(0deg) scale(1)'

                // scale up next card
                if (this.nextCard) this.nextCard.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(' + scale + ')'

                if (e.isFinal) {

                    this.isPanning = false

                    let successful = false

                    // set back transition properties
                    this.topCard.style.transition = 'transform 200ms ease-out'
                    if (this.nextCard) this.nextCard.style.transition = 'transform 100ms linear'

                    // check threshold and movement direction
                    if (propX > 0.25 && e.direction == Hammer.DIRECTION_RIGHT) {
                      
                        // Execute like TODO CHANGE
                        var xhr = new XMLHttpRequest();
                        xhr.open('GET', '/swipes/' + this.topCard.id + '/like', true); // Using Rails route helper
                        xhr.onload = function() {
                          if (xhr.status >= 200 && xhr.status < 300) {
                            var responseData = JSON.parse(xhr.responseText);
                            console.log(responseData.message);
                          } else {
                            console.error('Request failed with status code ' + xhr.status);
                          }
                        };
                        xhr.onerror = function() {
                          console.error('Request failed');
                        };
                        xhr.send();
                        //
                    
                        successful = true
                        // get right border position
                        posX = this.board.clientWidth

                    } else if (propX < -0.25 && e.direction == Hammer.DIRECTION_LEFT) {

                        // Execute dislike TODO CHANGE
                        var xhr = new XMLHttpRequest();
                        xhr.open('GET',  '/swipes/' + this.topCard.id + '/dislike', true); // Using Rails route helper
                        xhr.onload = function() {
                          if (xhr.status >= 200 && xhr.status < 300) {
                            var responseData = JSON.parse(xhr.responseText);
                            console.log(responseData.message);
                          } else {
                            console.error('Request failed with status code ' + xhr.status);
                          }
                        };
                        xhr.onerror = function() {
                          console.error('Request failed');
                        };
                        xhr.send();
                        //
                        
                        successful = true
                        // get left border position
                        posX = -(this.board.clientWidth + this.topCard.clientWidth)

                    }

                    if (successful) {

                        // throw card in the chosen direction
                        this.topCard.style.transform =
                            'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg)'

                        // wait transition end
                        setTimeout(() => {
                            // remove swiped card
                            this.board.removeChild(this.topCard)
                            // handle gestures on new top card
                            this.handle()
                        }, 200)

                    } else {

                        // reset cards position and size
                        this.topCard.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
                        if (this.nextCard) this.nextCard.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(0.95)'

                    }

                }

            }

            push(id, photo, name, address, bio) {

                let card = document.createElement('div')

                card.id = id
                card.classList.add('card')
                
                let button = '<button  type="button" class="btn btn-secondary align-self-start btn-sm" data-bs-toggle="modal" data-bs-target="#imageModal' + id + '">Show Photo Gallery</button>'
                
                let user_data = '<h4 class="card-title">' + name + '</h4>' +
                '          <h7>' + address + '</h7>' +
                '            <textarea class="form-control" rows="3" readonly="">Bio:' + bio +
                '</textarea>'
                card.innerHTML = "<div class = 'swipe_bot'>" + button + user_data + "</div>"
                

                card.style.backgroundImage =
                    "url('" + photo + "')"

                this.board.insertBefore(card, this.board.firstChild)

            }
            
            createGalleryModal(id, images) {
              // Create a new div element
              var modal = document.createElement("div")
            
              let images_link = ''
                
              images.split(',').forEach(function(image) {
              images_link += '<img class="img-fluid" id="modalImage" alt="Image" style="width: 250px; height: 300px; object-fit: cover;" src="' + image + '">'
              });
              modal.innerHTML = '<div class="modal fade" id="imageModal' + id + '" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">' +
                '<div class="modal-dialog modal-lg">' +
                '  <div class="modal-content">' +
                '    <div class="modal-header">' +
                '      <h5 class="modal-title" id="imageModalLabel">Photo Gallery</h5>' +
                '      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>' +
                '    </div>' +
                '    <div class="modal-body">' +
                '      ' + images_link + '  ' +
                '    </div>' +
                '  </div>' +
                '</div>' +
              '</div>'
              // Append the new div element to the body of the document
              document.body.appendChild(modal);
            }

        }

        let board = document.querySelector('#board')

        let carousel = new Carousel(board)
    </script>
</body>
<% else %>
<div class="container">
<div class="row justify-content-center">
  <div class="col-md-6">
    <div class="card">
      <div class="card-body text-center">
        <h3>No more profiles to show.</h3>
      </div>
    </div>
  </div>
</div>
</div>
<% end %>
